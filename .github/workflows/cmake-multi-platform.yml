# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
env:
  BUILD_TYPE: DEV
jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release, Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash      
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Set development build type
      if: ${{ matrix.build_type == 'Debug' }}
      run: |
        echo "BUILD_TYPE=DEV" >> $GITHUB_ENV

    - name: Set release build type
      if: ${{ matrix.build_type == 'Release' }}
      run: |
        echo "BUILD_TYPE=REL" >> $GITHUB_ENV

    - name: Configure CMake
      working-directory: ${{ github.workspace }}
      run: |        
        cmake --preset "DEFAULT-${{ env.BUILD_TYPE }}"

    - name: Build
      working-directory: ${{ github.workspace }}
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build --preset "DEFAULT-${{ env.BUILD_TYPE }}"

    - name: Install
      working-directory: ${{ github.workspace }}
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build --preset "DEFAULT-${{ env.BUILD_TYPE }}" --target "install_project"

    - name: Execute Test
      working-directory: ${{ github.workspace }}/.out/install/DEFAULT-${{ env.BUILD_TYPE }}/bin
      run: |
        ./app